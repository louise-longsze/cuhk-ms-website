// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Activity              Activity[]
  TimeRecord            TimeRecord[]
  BloodSugar            BloodSugar[]
  BloodPressure         BloodPressure[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum activityType {
  WALKING
  TAI_JI
  STRETCHING
  FAST_WALK
  SWIMMING
  RACING
  RUNNING
  YOGA
  GOLF
  BALL
  DANCE
  HIKING
  TENNIS
  BOXING
}

model Activity {
  id           String       @id @default(cuid())
  activityType activityType @default(WALKING)
  author       User?        @relation(fields: [authorId], references: [id])
  authorId     String?
}

enum PlaceStatus {
  Active
  Inactive
  Renovating
}

model Place {
  id         String      @id @default(cuid())
  district   String
  name       String
  address    String
  gov_url    String?
  facilities String?
  photo_path String
  status     PlaceStatus @default(Active)
}

model TimeRecord {
  id            String       @id @default(cuid())
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  name          String
  details       String
  location      String?
  datetime      DateTime
  durationInMin Int
  activityType  activityType @default(WALKING)

  @@index([authorId])
}

model BloodSugar {
  id       String @id @default(cuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  datetime        DateTime
  beforeBreakfast Int?
  afterBreakfast  Int?
  beforeLunch     Int?
  afterLunch      Int?
  beforeDinner    Int?
  afterDinner     Int?
  beforeSleep     Int?
  remarks         String?

  @@index([authorId])
  @@index([authorId, datetime])
}

model BloodPressure {
  id       String   @id @default(cuid())
  author   User     @relation(fields: [authorId], references: [id])
  authorId String
  datetime DateTime

  sbp   Int?
  dbp   Int?
  pulse Int?

  @@index([authorId])
  @@index([authorId, datetime])
}
